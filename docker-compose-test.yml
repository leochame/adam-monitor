version: '3.8'

services:
  # Zookeeper - Kafka依赖
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: adam-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ~/data/adam-monitor/zk_data:/var/lib/zookeeper/data
      - ~/data/adam-monitor/zk_log:/var/lib/zookeeper/log
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: adam-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - ~/data/adam-monitor/kafka_data:/var/lib/kafka/data
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI - 用于监控和管理Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: adam-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: adam-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - adam-network

  # Nacos - 服务注册中心
  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: adam-nacos
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=nacos-mysql
      - MYSQL_SERVICE_DB_NAME=nacos
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=nacos
      - MYSQL_SERVICE_PASSWORD=nacos123
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    volumes:
      - ~/data/adam-monitor/nacos/logs:/home/nacos/logs
      - ~/data/adam-monitor/nacos/data:/home/nacos/data
    ports:
      - "8848:8848"
      - "9848:9848"
    depends_on:
      nacos-mysql:
        condition: service_healthy
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/v1/ns/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nacos MySQL数据库
  nacos-mysql:
    image: mysql:8.0
    container_name: adam-nacos-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=nacos
      - MYSQL_USER=nacos
      - MYSQL_PASSWORD=nacos123
    volumes:
      - ~/data/adam-monitor/nacos/mysql_data:/var/lib/mysql
      - ./nacos/mysql_init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "nacos", "-pnacos123"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ClickHouse - 日志存储
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: adam-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: adam_monitor
      CLICKHOUSE_USER: adam
      CLICKHOUSE_PASSWORD: adam123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - ~/data/adam-monitor/ch_data:/var/lib/clickhouse
      - ~/data/adam-monitor/ch_logs:/var/log/clickhouse-server
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 缓存
  redis:
    image: redis:7.0-alpine
    container_name: adam-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis123
    volumes:
      - ~/data/adam-monitor/redis_data:/data
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - 监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: adam-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ~/data/adam-monitor/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - adam-network

  # Grafana - 监控可视化
  grafana:
    image: grafana/grafana:10.1.0
    container_name: adam-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - ~/data/adam-monitor/grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - adam-network

  # Jaeger - 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: adam-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - adam-network

  # 测试应用 - Provider
  adam-test-provider:
    build:
      context: .
      dockerfile: Dockerfile-test-provider
    container_name: adam-test-provider
    ports:
      - "20880:20880"
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dubbo,docker
      - DUBBO_REGISTRY_ADDRESS=nacos://nacos:8848
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CLICKHOUSE_URL=jdbc:clickhouse://clickhouse:8123/adam_monitor
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis123
    depends_on:
      nacos:
        condition: service_healthy
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 测试应用 - Consumer
  adam-test-consumer:
    build:
      context: .
      dockerfile: Dockerfile-test-consumer
    container_name: adam-test-consumer
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=dubbo,docker
      - DUBBO_REGISTRY_ADDRESS=nacos://nacos:8848
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ADAM_TEST_PROVIDER_URL=http://adam-test-provider:8081
    depends_on:
      adam-test-provider:
        condition: service_healthy
    networks:
      - adam-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  adam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  zk_data:
  zk_log:
  kafka_data:
  nacos_logs:
  nacos_data:
  nacos_mysql_data:
  ch_data:
  ch_logs:
  redis_data:
  prometheus_data:
  grafana_data: 